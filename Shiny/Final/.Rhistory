labs(x = "Year", y = "Crimes Commited")+
ggtitle("Crimes Commited Each Year By State")
# 3 Parallel Coordinate Plot Year, Labor, Yearly_crime
ggparcoord(data = combined_data,
columns = c(1,2,4),
groupColumn = 5,
scale = "uniminmax",
showPoints = FALSE,
alphaLines = .5
)+
labs(x = "Variables", y = "Min Max Scale Based on Value")+
ggtitle("Parallel Coordinate Plot of Year, Labor Force and Yearly crime")
# 3 Parallel Coordinate Plot Year, Unemployment, Yearly_crime
ggparcoord(data = combined_data,
columns = c(1,3,4),
groupColumn = 5,
scale = "uniminmax",
showPoints = FALSE,
alphaLines = .5) +
labs(x = "Variables", y = "Min Max Scale Based on Value")+
ggtitle("Parallel Coordinate Plot of Year, Unemployment and Yearly crime")
# 4 ScatterPlot of Crime vs Year based on Jurisdiction
ggplot(yearly_crime_m_raw, aes(x = Year, y = GRAND.TOTAL, color = JURISDICTION)) +
geom_point() +
labs(x = "Year", y = "Crimes Commited") +
ggtitle("Scatter Plot of Crime vs Year based on Jurisdiction")
# 4 ScatterPlot of Crime vs Year based on Jurisdiction
ggplot(yearly_crime_n_raw, aes(x = Year, y = Index_Count, color = County)) +
geom_point()+
labs(x = "Year", y = "Crimes Commited")+
ggtitle("Scatter Plot of Crime vs Year based on County")
ggplot(yearly_crime_m, aes(x = Year, y = GRAND.TOTAL, color = JURISDICTION)) +
geom_point(data = subset(yearly_crime_m, POPULATION < 2000000 & 350000 < POPULATION))+
labs(x = "Year", y = "Crimes Commited")
png("larceny vs state maryland  330000 pop.png", width = 800, height = 600)
ggplot(yearly_crime_m, aes(x = Year, y = GRAND.TOTAL, color = JURISDICTION)) +
geom_point(data = subset(yearly_crime_m, POPULATION < 330000))+
labs(x = "Year", y = "Crimes Commited")
ggplot(yearly_crime_m, aes(LARCENY.THEFT, JURISDICTION)) + geom_boxplot()
# ScatterPlot of County vs Crime
ggplot(new_york_crime, aes(x = `Index Count`)) +
geom_boxplot(data = subset(new_york_crime, County == 'Kings'))+
labs(x = "Population of County", y = "Crimes Commited")+
ggtitle("Scatter Plot of Crime vs Year based on County")
png("New York scatter.png", width = 800, height = 600)
# 4 ScatterPlot of Crime vs Year based on Jurisdiction
ggplot(yearly_crime_n_raw, aes(x = Year, y = Index_Count, color = County)) +
geom_point()+
labs(x = "Year", y = "Crimes Commited")+
ggtitle("Scatter Plot of Crime vs Year based on County")
View(washington)
png("New York scatter.png", width = 800, height = 600)
# 4 ScatterPlot of Crime vs Year based on Jurisdiction
ggplot(yearly_crime_n_raw, aes(x = Year, y = Index_Count, color = County)) +
geom_point()+
labs(x = "Year", y = "Crimes Commited")+
ggtitle("Scatter Plot of Crime vs Year based on County")
png("wash scatter.png", width = 800, height = 600)
ggplot(washington, aes(x = Year, y = yearly_crime)) +
geom_point()+
labs(x = "Year", y = "Crimes Commited")+
ggtitle("Scatter Plot of Crime vs Year Washington")
png("New York scatter.png", width = 800, height = 600)
# 4 ScatterPlot of Crime vs Year based on Jurisdiction
ggplot(yearly_crime_n_raw, aes(x = Year, y = Index_Count, color = County)) +
geom_point()+
labs(x = "Year", y = "Crimes Commited")+
ggtitle("Scatter Plot of Crime vs Year based on County")
png("wash scatter.png", width = 400, height = 300)
ggplot(washington, aes(x = Year, y = yearly_crime)) +
geom_point()+
labs(x = "Year", y = "Crimes Commited")+
ggtitle("Scatter Plot of Crime vs Year Washington")
View(combined_data)
# 3 Parallel Coordinate Plot Year, Labor, Yearly_crime
ggparcoord(data = combined_data,
columns = c(1,2,3,4),
groupColumn = 5,
scale = "uniminmax",
showPoints = FALSE,
alphaLines = .5
)+
labs(x = "Variables", y = "Min Max Scale Based on Value")+
ggtitle("Parallel Coordinate Plot of Year, Labor Force and Yearly crime")
png("combined parellel.png", width = 400, height = 300)
# 3 Parallel Coordinate Plot Year, Labor, Yearly_crime
ggparcoord(data = combined_data,
columns = c(1,2,3,4),
groupColumn = 5,
scale = "uniminmax",
showPoints = FALSE,
alphaLines = .5
)+
labs(x = "Variables", y = "Min Max Scale Based on Value")+
ggtitle("Parallel Coordinate Plot of Year, Labor Force and Yearly crime")
runApp('X:/Coding/Rstudio/R Projects/Data 490 Model Building/Shiny/Final')
#install.packages("arm")
library(arm)
pca_crime <- crimeTotalm_raw
pca_crime <- merge(x = mu, y = pca_crime, by = "Year", all.y = TRUE)
pca_crime <- merge(x = ml, y = pca_crime, by = "Year", all.y = TRUE)
selected_columns5 <- pca_crime[, c("POPULATION","Labor","Unemployment")]
scaled_data <- scale(selected_columns5)
pca_results <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
principal_components <- pca_results$x
png("biplot", width = 400, height = 400)
biplot(pca_results)
#1
print("Overall Crime")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$GRAND.TOTAL)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
nb_model <- glm.nb(grand.total ~ ., data = regression_crime)
summary(nb_model)
#2
print("Breaking and Entering")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$B...E)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#3
print("Larceny Theft")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$LARCENY.THEFT)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#4
print("Robbery")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$ROBBERY)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#5
print("Murder")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$MURDER)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#6
print("Aggrevated Assualt")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$AGG..ASSAULT)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#7
print("MV THEFT")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$M.V.THEFT)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
biplot(pca_results)
knitr::opts_chunk$set(include = FALSE)
options(repos = c(CRAN = "https://cloud.r-project.org"))
library(modelr)
library(tidyverse)
library(ggplot2)
library(GGally)
library(dplyr)
#install.packages("lmtest")
library(lmtest)
#install.packages(c("MASS", "car", "caret"))
library(MASS)
library(car)
library(caret)
setwd("X:/Coding/Rstudio/R Projects/Data 490 Model Building/Documentation")
yearly_crime_m_raw <- read.csv("Maryland crime 1975-2022.csv") %>%
rename(Year = YEAR)
crimeTotalm_raw <- yearly_crime_m_raw %>%
group_by(Year) %>%
mutate(theft_total = sum(LARCENY.THEFT)) %>%
mutate(murder_total = sum(MURDER)) %>%
mutate(be_total = sum(B...E)) %>%
filter(Year != 1975)
#Maryland Unemployment
mu <- read.csv("MDUR.csv") %>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Unemployment
rename(Unemployment = MDUR)
#Remove 2023 Which is NA
mu <- mu %>%
filter(Year != 2023)
#Convert column from character to numeric
mu$Unemployment <- as.numeric(mu$Unemployment)
#Round data to second decimal
mu$Unemployment <- round(mu$Unemployment, digits = 2)
#Maryland Labor Force
ml <- read.csv("maryland_labor.csv") %>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Labor
rename(Labor = LBSSA24)
#Remove 2023 Which is NA
ml <- ml %>%
filter(Year != 2023)
#Convert column from character to numeric
ml$Labor <- as.numeric(ml$Labor)
#Round data to second decimal
ml$Labor <- round(ml$Labor, digits = 2)
#Maryland Crime Only Year and Grand Total
crimeTotalm <- crimeTotalm_raw[, c(1:3,11,39:41)]
#Merge Unemployment with Yearly crime
crimeTotalm <- merge(x = mu, y = crimeTotalm, by = "Year", all.y = TRUE)
#Merge Labor force with Unemployment and Yearly Crime
crimeTotalm <- merge(x = ml, y = crimeTotalm, by = "Year",
all.y = TRUE)
countylist <- unique(crimeTotalm$JURISDICTION)
# Create an empty data frame to store results
correlation_data <- data.frame(JURISDICTION = character(),
correlation = numeric(),
average_population = numeric(),
stringsAsFactors = FALSE)
for (i in seq_along(countylist)) {
county_data <- crimeTotalm %>%
filter(JURISDICTION == countylist[i])
# Calculate correlation
correlation_value <- cor(county_data$Labor, county_data$GRAND.TOTAL)
# Calculate average population
average_population <- mean(county_data$POPULATION)
# Append the results to the correlation_data data frame
correlation_data <- bind_rows(correlation_data,
data.frame(JURISDICTION = countylist[i],
correlation = correlation_value,
average_population = average_population))
}
#New York Unemployment
nu <- read.csv("NYUR.csv")%>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Unemployment
rename(Unemployment = NYUR)
#Remove 2023 Which is NA
nu <- nu %>%
filter(Year != 2023)
#Convert column from character to numeric
nu$Unemployment <- as.numeric(nu$Unemployment)
#Round data to second decimal
nu$Unemployment <- round(nu$Unemployment, digits = 2)
#New York Labor Force
nl <- read.csv("newyork_labor.csv") %>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Labor
rename(Labor = LBSSA36)
#Remove 2023 Which is NA
nl <- nl %>%
filter(Year != 2023)
#Convert column from character to numeric
nl$Labor <- as.numeric(nl$Labor)
#Round data to second decimal
nl$Labor <- round(nl$Labor, digits = 2)
#Washington Unemployment
wu <- read.csv("WAUR.csv")%>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Unemployment
rename(Unemployment = WAUR)
#Remove 2023 Which is NA
wu <- wu %>%
filter(Year != 2023)
#Convert column from character to numeric
wu$Unemployment <- as.numeric(wu$Unemployment)
#Round data to second decimal
wu$Unemployment <- round(wu$Unemployment, digits = 2)
#Washington Labor Force
wl <- read.csv("washington_labor.csv") %>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Labor
rename(Labor = LBSSA53)
#Remove 2023 Which is NA
wl <- wl %>%
filter(Year != 2023)
#Convert column from character to numeric
wl$Labor <- as.numeric(wl$Labor)
#Round data to second decimal
wl$Labor <- round(wl$Labor, digits = 2)
#Washington
#Washington crime that only leaves state totals and renames columns
yearly_crime_w_raw <- read.csv("washington_state_crime.csv") %>%
rename(Year = year)
yearly_crime_w <- yearly_crime_w_raw %>%
group_by(Year) %>%
filter(county == "STATE")
#Create data set the contains all Data from the SRS reporting system 1990-2011
yearly_crime_w_srs <- yearly_crime_w[c(1:22),c(1,3,22)] %>%
rename(yearly_crime = SRS_TOTAL)
#Create data set that contains all Data from the NIBRS system starting in 2012-2020
yearly_crime_w_nib <- yearly_crime_w[c(23:33),c(1,3,46)] %>%
rename(yearly_crime = NIB_TOTAL)
#Combine both Datasets
yearly_crime_w_clean <- rbind.data.frame(yearly_crime_w_nib,yearly_crime_w_srs)
#Order Data set by Year
yearly_crime_w_clean <- yearly_crime_w_clean[order(yearly_crime_w_clean$Year), ]
#Merge Unemployment with Yearly crime
washington <- merge(x = wu, y = yearly_crime_w_clean, by = "Year", all.y = TRUE)
#Merge Labor force with Unemployment and Yearly Crime
washington <- merge(x = wl, y = washington, by = "Year",
all.y = TRUE)
#New York Crime w/ Grand Total
yearly_crime_n_raw <- read.csv("new york crime.csv")
yearly_crime_n <- yearly_crime_n_raw %>%
group_by(Year) %>%
mutate(yearly_crime = sum(Index_Count)) %>%
mutate(yearly_pop = sum(Population))
#New York Crime Only Year and Grand Total
yearly_crime_n_clean <- yearly_crime_n[c(1:33), c(2,12, 13)]
#Merge Unemployment with Yearly crime
newyork <- merge(x = nu, y = yearly_crime_n_clean, by = "Year", all.y = TRUE)
#Merge Labor force with Unemployment and Yearly Crime
newyork <- merge(x = nl, y = newyork, by = "Year",
all.y = TRUE)
newyork_noagg <- merge(x = nu, y = yearly_crime_n_raw, by = "Year", all.y = TRUE)
newyork_noagg <- merge(x = nl, y = newyork_noagg, by = "Year", all.y = TRUE)
#install.packages("arm")
library(arm)
pca_crime <- crimeTotalm_raw
pca_crime <- merge(x = mu, y = pca_crime, by = "Year", all.y = TRUE)
pca_crime <- merge(x = ml, y = pca_crime, by = "Year", all.y = TRUE)
selected_columns5 <- pca_crime[, c("POPULATION","Labor","Unemployment")]
scaled_data <- scale(selected_columns5)
pca_results <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
principal_components <- pca_results$x
biplot(pca_results)
#1
print("Overall Crime")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$GRAND.TOTAL)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
nb_model <- glm.nb(grand.total ~ ., data = regression_crime)
summary(nb_model)
#2
print("Breaking and Entering")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$B...E)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#3
print("Larceny Theft")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$LARCENY.THEFT)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#4
print("Robbery")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$ROBBERY)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#5
print("Murder")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$MURDER)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#6
print("Aggrevated Assualt")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$AGG..ASSAULT)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#7
print("MV THEFT")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$M.V.THEFT)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#3
print("Larceny Theft")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$LARCENY.THEFT)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
#4
print("Robbery")
regression_crime <- data.frame(principal_components, grand.total = pca_crime$ROBBERY)
lm_model <- lm(grand.total ~ ., data = regression_crime)
summary(lm_model)
# New York
setwd("X:/Coding/Rstudio/R Projects/Data 490 Model Building/Documentation")
#New York Crime w/ Grand Total
yearly_crime_n_raw <- read.csv("new york crime.csv")
yearly_crime_n <- yearly_crime_n_raw %>%
group_by(Year) %>%
mutate(yearly_crime = sum(Index_Count))
#New York Unemployment
nu <- read.csv("NYUR.csv")%>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Unemployment
rename(Unemployment = NYUR)
#Remove 2023 Which is NA
nu <- nu %>%
filter(Year != 2023)
#Convert column from character to numeric
nu$Unemployment <- as.numeric(nu$Unemployment)
#Round data to second decimal
nu$Unemployment <- round(nu$Unemployment, digits = 2)
#New York Labor Force
nl <- read.csv("newyork_labor.csv") %>%
#Converts the Date Column from a Date to a Year
mutate(DATE = year(DATE)) %>%
#Changes the Date Column name to Year
rename(Year = DATE) %>%
#Rename column to Labor
rename(Labor = LBSSA36)
#Remove 2023 Which is NA
nl <- nl %>%
filter(Year != 2023)
#Convert column from character to numeric
nl$Labor <- as.numeric(nl$Labor)
#Round data to second decimal
nl$Labor <- round(nl$Labor, digits = 2)
# Left join 'yearly_crime_n_raw' with 'nu' based on the 'Year' column
yearly_crime_n_raw <- left_join(yearly_crime_n_raw, nl, by = 'Year')
# Left join 'yearly_crime_n_raw' with 'nu' based on the 'Year' column
yearly_crime_n_raw <- left_join(yearly_crime_n_raw, nu, by = 'Year')
results <- yearly_crime_n_raw %>%
group_by(County) %>%
summarize(mean_population = mean(Population)) %>%
arrange(desc(mean_population))
summary(results)
#Breaks the the counties into four groups
for( i in seq_along(results$mean_population)) {
if (results$mean_population[i] > 232099) {
results$pop_group[i] = 4
}else if(results$mean_population[i] > 91082){
results$pop_group[i] = 3
}else if(results$mean_population[i] > 50689){
results$pop_group[i] = 2
}else if(results$mean_population[i] <= 50689 ){
results$pop_group[i] = 1}
}
# Merge the two data frames on the 'County' column
merged_data <- merge(yearly_crime_n_raw, results[, c('County', 'pop_group')], by = 'County', all.x = TRUE)
# Print the merged data frame
pop_groups <- unique(merged_data$pop_group)
# Create an empty list to store regression models
regression_models <- list()
# Iterate through each population group and fit a Poisson regression model
for (group in pop_groups) {
subset_data <- filter(merged_data, pop_group == group)
model <- glm(Index_Count ~ Unemployment + Labor + Population, data = subset_data, family = poisson(link = "log"))
regression_models[[group]] <- model
# Print summary for each model with the corresponding group
cat("Summary for", group, ":\n")
print(summary(model))
cat("\n")
}
count_by_pop_group <- table(results$pop_group)
print(count_by_pop_group)
pop_groups <- unique(merged_data$pop_group)
# Create an empty list to store regression models
regression_models <- list()
# Iterate through each population group and fit a Negative Binomial regression model
for (group in pop_groups) {
subset_data <- filter(merged_data, pop_group == group)
# Fit Negative Binomial Regression
model <- glm.nb(Index_Count ~ Unemployment + Labor + Population, data = subset_data)
regression_models[[group]] <- model
# Print summary for each model with the corresponding group
cat("Summary for", group, ":\n")
print(summary(model))
cat("\n")
}
# (Assuming 'results' is the correct dataframe to use for count_by_pop_group)
count_by_pop_group <- table(results$pop_group)
print(count_by_pop_group)
ny_agg <- glm.nb(yearly_crime ~ Unemployment + Labor + yearly_pop , data = newyork)
ny_noagg <- glm.nb(Index_Count ~ Unemployment + Labor + Population, data = newyork_noagg)
summary(ny_agg)
summary(ny_noagg)
options(scipen = 999)
set.seed(123)
train_indices <- createDataPartition(newyork_noagg$Index_Count, p = 0.8, list = FALSE)
train_data <- newyork_noagg[train_indices, ]
test_data <- newyork_noagg[-train_indices, ]
# Fit the negative binomial regression model
nb_model <- glm.nb(Index_Count ~ Unemployment + Labor + Population, data = train_data)
# Make predictions on the testing set
predictions <- predict(nb_model, newdata = test_data, type = "response")
# Evaluate model performance
performance_metrics <- postResample(predictions, test_data$Index_Count)
# Print performance metrics (you can choose different metrics)
print(performance_metrics)
# Create a visualization
png("your_plot_noagg.png", width = 800, height = 600)
plot(predictions, test_data$Index_Count, main = "Predicted vs. Actual",
xlab = "Predicted Values", ylab = "Actual Values")  # Set x-axis limit
abline(a = 0, b = 1, col = "red")  # Diagonal line for reference
dev.off()
options(scipen = 999)
set.seed(123)
train_indices <- createDataPartition(new_york$Index_Count, p = 1, list = FALSE)
train_data <- new_york[train_indices, ]
test_data <- newyork_noagg[-train_indices, ]
# Fit the negative binomial regression model
nb_model <- glm.nb(Index_Count ~ Unemployment + Labor + Population, data = train_data)
# Make predictions on the testing set
predictions <- predict(nb_model, newdata = test_data, type = "response")
# Evaluate model performance
performance_metrics <- postResample(predictions, test_data$Index_Count)
# Print performance metrics (you can choose different metrics)
print(performance_metrics)
# Create a visualization
png("your_plotagg1.png", width = 800, height = 600)
plot(predictions, test_data$Index_Count, main = "Predicted vs. Actual",
xlab = "Predicted Values", ylab = "Actual Values")  # Set x-axis limit
abline(a = 0, b = 1, col = "red")  # Diagonal line for reference
dev.off()
runApp('X:/Coding/Rstudio/R Projects/Data 490 Model Building/Shiny/Final')
